/**
* The Blue Alliance API v3
* # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
*
* The version of the OpenAPI document: 3.5.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.npmanos.tbalib.model

/**
 * 
 * @param key TBA match key with the format `yyyy[EVENT_CODE]_[COMP_LEVEL]m[MATCH_NUMBER]`, where `yyyy` is the year, and `EVENT_CODE` is the event code of the event, `COMP_LEVEL` is (qm, ef, qf, sf, f), and `MATCH_NUMBER` is the match number in the competition level. A set number may be appended to the competition level if more than one match in required per set.
 * @param compLevel The competition level the match was played at.
 * @param setNumber The set number in a series of matches where more than one match is required in the match series.
 * @param matchNumber The match number of the match in the competition level.
 * @param eventKey Event key of the event the match was played at.
 * @param alliances 
 * @param winningAlliance The color (red/blue) of the winning alliance. Will contain an empty string in the event of no winner, or a tie.
 * @param time UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of the scheduled match time, as taken from the published schedule.
 * @param actualTime UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of actual match start time.
 * @param predictedTime UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of the TBA predicted match start time.
 * @param postResultTime UNIX timestamp (seconds since 1-Jan-1970 00:00:00) when the match result was posted.
 * @param scoreBreakdown Score breakdown for auto, teleop, etc. points. Varies from year to year. May be null.
 * @param videos Array of video objects associated with this match.
 */

data class Match (
    /* TBA match key with the format `yyyy[EVENT_CODE]_[COMP_LEVEL]m[MATCH_NUMBER]`, where `yyyy` is the year, and `EVENT_CODE` is the event code of the event, `COMP_LEVEL` is (qm, ef, qf, sf, f), and `MATCH_NUMBER` is the match number in the competition level. A set number may be appended to the competition level if more than one match in required per set. */
    val key: kotlin.String,
    /* The competition level the match was played at. */
    val compLevel: Match.CompLevel,
    /* The set number in a series of matches where more than one match is required in the match series. */
    val setNumber: kotlin.Int,
    /* The match number of the match in the competition level. */
    val matchNumber: kotlin.Int,
    /* Event key of the event the match was played at. */
    val eventKey: kotlin.String,
    val alliances: MatchSimpleAlliances? = null,
    /* The color (red/blue) of the winning alliance. Will contain an empty string in the event of no winner, or a tie. */
    val winningAlliance: Match.WinningAlliance? = null,
    /* UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of the scheduled match time, as taken from the published schedule. */
    val time: kotlin.Long? = null,
    /* UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of actual match start time. */
    val actualTime: kotlin.Long? = null,
    /* UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of the TBA predicted match start time. */
    val predictedTime: kotlin.Long? = null,
    /* UNIX timestamp (seconds since 1-Jan-1970 00:00:00) when the match result was posted. */
    val postResultTime: kotlin.Long? = null,
    /* Score breakdown for auto, teleop, etc. points. Varies from year to year. May be null. */
    val scoreBreakdown: kotlin.Any? = null,
    /* Array of video objects associated with this match. */
    val videos: kotlin.collections.List<MatchVideos>? = null
) 


{
    /**
    * The competition level the match was played at.
    * Values: qm,ef,qf,sf,f
    */

    enum class CompLevel(val value: kotlin.String)

    /**
    * The color (red/blue) of the winning alliance. Will contain an empty string in the event of no winner, or a tie.
    * Values: red,blue,eMPTY
    */

    enum class WinningAlliance(val value: kotlin.String)
}

